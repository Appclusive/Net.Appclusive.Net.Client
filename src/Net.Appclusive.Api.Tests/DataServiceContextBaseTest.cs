/**
 * Copyright 2017 d-fens GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Services.Client;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Net.Appclusive.Api.Tests.Northwind;

namespace Net.Appclusive.Api.Tests
{
    [TestClass]
    public class DataServiceContextBaseTest
    {
        private static readonly Uri _serviceRoot;

        static DataServiceContextBaseTest()
        {
            var uriPrefix = "http://services.odata.org/V3/Northwind/Northwind.svc/";
            _serviceRoot = new Uri(uriPrefix);
        }

        [TestMethod]
        public void IfThisTestBreaksTheBaseClassOfTheAutoGeneratedServiceReferenceEndpointHasToBeChangedToDataServiceContextBase()
        {
            var assembly = typeof(DataServiceContextBase).Assembly;
            foreach (var definedType in assembly.DefinedTypes)
            {
                if (!(definedType.IsPublic || definedType.IsNested))
                {
                    continue;
                }

                if (definedType.IsInterface)
                {
                    continue;
                }

                if (definedType.BaseType == typeof(DataServiceContext))
                {
                    var definedTypeParts = definedType.FullName.Split('.');
                    Assert.IsTrue(2 <= definedTypeParts.Length);
                    Assert.AreNotEqual(definedTypeParts[definedTypeParts.Length - 1], definedTypeParts[definedTypeParts.Length - 2]);
                }
            }
        }

        [TestMethod]
        public void GetTenantHeaderNameWithoutSettingBeforeReturnsDefaultTenantHeaderName()
        {
            // Arrange
            var sut = new DataServiceContextBase();

            // Act
            var result = sut.TenantHeaderName;

            // Assert
            Assert.AreEqual(DataServiceContextBase.DEFAULT_TENANT_HEADER_NAME, result);
        }

        [TestMethod]
        public void GetVersionReturnsAssemblyVersion()
        {
            // Arrange

            // Act
            var version = DataServiceContextBase.GetVersion();

            // Assert
            Assert.AreEqual(typeof(DataServiceContextBase).Assembly.GetName().Version, version);
        }

        [TestMethod]
        public void GetBodyOperationParametersFromObjectSucceeds()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);

            var param1Value = "some arbitrary value";
            var param2Value = 42;
            var input = new BodyOperationTestClass()
            {
                Param1 = param1Value,
                Param2 = param2Value
            };

            // Act
            var result = svc.GetBodyOperationParametersFromObject(input);

            // Assert
            Assert.AreEqual(3, result.Count());
            var p1 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param1));
            Assert.AreEqual(param1Value, p1.Value);
            var p2 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param2));
            Assert.AreEqual(param2Value, p2.Value);
            var p3 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Field3));
            Assert.AreEqual(BodyOperationTestClass.FIELD3_VALUE, p3.Value);
        }

        [TestMethod]
        public void GetBodyOperationParametersFromHashtableSucceeds()
        {
            // Arrange
            var param1Value = "some arbitrary value";
            var param2Value = 42;

            var svc = new NorthwindEntities(_serviceRoot);

            var input = new Hashtable
            {
                {nameof(BodyOperationTestClass.Param1), param1Value},
                {nameof(BodyOperationTestClass.Param2), param2Value},
                {nameof(BodyOperationTestClass.Field3), BodyOperationTestClass.FIELD3_VALUE}
            };

            // Act
            var result = svc.GetBodyOperationParametersFromHashtable(input);

            // Assert
            Assert.AreEqual(3, result.Count());
            var p1 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param1));
            Assert.AreEqual(param1Value, p1.Value);
            var p2 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param2));
            Assert.AreEqual(param2Value, p2.Value);
            var p3 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Field3));
            Assert.AreEqual(BodyOperationTestClass.FIELD3_VALUE, p3.Value);
        }

        [TestMethod]
        public void GetBodyOperationParametersFromDictionarySucceeds()
        {
            // Arrange
            var param1Value = "some arbitrary value";
            var param2Value = 42;

            var svc = new NorthwindEntities(_serviceRoot);

            var input = new Dictionary<string, object>
            {
                {nameof(BodyOperationTestClass.Param1), param1Value},
                {nameof(BodyOperationTestClass.Param2), param2Value},
                {nameof(BodyOperationTestClass.Field3), BodyOperationTestClass.FIELD3_VALUE}
            };

            // Act
            var result = svc.GetBodyOperationParametersFromDictionary(input);

            // Assert
            Assert.AreEqual(3, result.Count());
            var p1 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param1));
            Assert.AreEqual(param1Value, p1.Value);
            var p2 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Param2));
            Assert.AreEqual(param2Value, p2.Value);
            var p3 = result.Single(e => e.Name == nameof(BodyOperationTestClass.Field3));
            Assert.AreEqual(BodyOperationTestClass.FIELD3_VALUE, p3.Value);
        }

        [TestMethod]
        public void HasPendingChangesWithNoChangesReturnsFalse()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);

            // Act
            var result = svc.HasPendingChanges();

            // Assert
            Assert.IsFalse(result);
        }

        [TestMethod]
        public void HasPendingChangesWithChangesReturnsTrue()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);
            var category = new Category();
            svc.AddToCategories(category);

            // Act
            var result = svc.HasPendingChanges();

            // Assert
            Assert.IsTrue(result);
        }

        [TestMethod]
        public void RevertEntityStateWithAddedStateSucceeds()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);
            var entity = new Category();
            svc.AddToCategories(entity);

            // Act
            svc.RevertEntityState(entity);

            // Assert
            Assert.IsFalse(svc.HasPendingChanges());
        }

        [TestMethod]
        public void RevertEntityStateWithModifiedStateSucceeds()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);
            var entity = svc.Categories.First();
            entity.Description = "arbitrary-changed-description-setting-the-entity-state-to-modified";

            // Act
            svc.RevertEntityState(entity);

            // Assert
            Assert.IsFalse(svc.HasPendingChanges());
        }

        [TestMethod]
        public void RevertEntityStateWithDeletedStateSucceeds()
        {
            // Arrange
            var svc = new NorthwindEntities(_serviceRoot);
            var entity = svc.Categories.First();
            svc.DeleteObject(entity);

            // Act
            svc.RevertEntityState(entity);

            // Assert
            Assert.IsFalse(svc.HasPendingChanges());
        }
    }

    public class BodyOperationTestClass
    {
        public const string FIELD3_VALUE = "field3";

        public string Param1 { get; set; }
        public int Param2;
        public string Field3 = FIELD3_VALUE;
    }
}
